{"version":3,"file":"script-loader-map.js","sourceRoot":"","sources":["script-loader-map.ts"],"names":[],"mappings":"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","sourcesContent":["export interface notifyCallback { \n    (error: Error, result : any): void \n}\n\ninterface Dictionary<T> {\n    [Key: string]: T;\n}\n\nexport class ScriptLoaderMap {\n    private static instance : ScriptLoaderMap;\n    private apiMap: Dictionary<ScriptLoader> = {};  // { hash -> Loader }\n\n    public require(url : string, notifyCallback : notifyCallback, jsonpCallbackName : string) {\n        var name = this.nameFromUrl(url);\n\n        // create a loader as needed\n        if (!this.apiMap[name])\n        this.apiMap[name] = new ScriptLoader(name, url, jsonpCallbackName);\n\n        // ask for notification\n        this.apiMap[name].requestNotify(notifyCallback);\n    }\n\n    public static getInstance() : ScriptLoaderMap {\n        if (!ScriptLoaderMap.instance) {\n            ScriptLoaderMap.instance = new ScriptLoaderMap();\n        }\n    \n        return ScriptLoaderMap.instance;\n      }\n\n    private nameFromUrl(url : string) : string {\n        return url.replace(/[\\:\\/\\%\\?\\&\\.\\=\\-\\,]/g, '_') + '_api';\n    }\n}\n\nclass ScriptLoader {\n    error : Error;\n    result : any;\n    notifiers : Array<notifyCallback>;\n    callbackName : string;\n    callbackMacro : string = '%%callback%%';\n    loaded : boolean = false;\n    script : HTMLScriptElement = null;\n\n    constructor(name : string, url : string, callbackName : string) {\n        this.notifiers = [];\n\n        // callback is specified either as callback name\n        // or computed dynamically if url has callbackMacro in it\n        if (!callbackName) {\n            if (url.indexOf(this.callbackMacro) >= 0) {\n                callbackName = name + '_loaded';\n                url = url.replace(this.callbackMacro, callbackName);\n            } else {\n                console.error('ScriptLoader class: a %%callback%% parameter is required in libraryUrl');\n                return;\n            }\n        }\n\n        this.callbackName = callbackName;\n        (window as { [key: string]: any })[this.callbackName] = this.success.bind(this);\n        this.addScript(url);\n    }\n\n    addScript(src : string) {\n        var script = document.createElement('script');\n        script.src = src;\n        script.onerror = this.handleError.bind(this);\n        var s = document.querySelector('script') || document.body;\n        s.parentNode.insertBefore(script, s);\n        this.script = script;\n    }\n\n    removeScript() {\n        if (this.script.parentNode) {\n          this.script.parentNode.removeChild(this.script);\n        }\n        this.script = null;\n    }\n\n    handleError(ev : OnErrorEventHandlerNonNull) {\n        this.error = new Error('Library failed to load');\n        this.notifyAll();\n        this.cleanup();\n    }\n\n    success() {\n        this.loaded = true;\n        this.result = Array.prototype.slice.call(arguments);\n        this.notifyAll();\n        this.cleanup();\n    }\n\n    cleanup() {\n        delete (window as { [key: string]: any })[this.callbackName];\n    }\n\n    notifyAll() {\n        this.notifiers.forEach(function(notifyCallback : notifyCallback) {\n          notifyCallback(this.error, this.result);\n        }.bind(this));\n        this.notifiers = [];\n    }\n\n    requestNotify(notifyCallback : notifyCallback) {\n        if (this.loaded || this.error) {\n          notifyCallback(this.error, this.result);\n        } else {\n          this.notifiers.push(notifyCallback);\n        }\n    }\n}"]}